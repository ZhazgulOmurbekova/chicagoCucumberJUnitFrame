// pipeline {
//     agent {
//         label 'SL202_win'
//     }
//     stages {
//         stage("Fetch repository") {
//             steps {
//                     git 'https://git.ceesiesdomain.nl/scm/rsd/test_automation.git'
//                 }
//             }
//         stage('Run test') {
//             steps {
//                 bat 'cd d:/SL202_Data/workspace/Front-end-SwiftNL/Sanctie_Regressie_Workflows_WCM'
//                 bat 'mvn clean test -f d:/SL202_Data/workspace/Front-end-SwiftNL/Sanctie_Regressie_Workflows_WCM/pom.xml -Dtest=TestRunner'
//             }
//         }
//     }
//     post {
//         always {
//             echo 'Test run completed'
//             cucumber buildStatus: 'UNSTABLE', failedFeaturesNumber: 999, failedScenariosNumber: 999, failedStepsNumber: 3, fileIncludePattern: '**/*.json', skippedStepsNumber: 999
//         }
//         success {
//             echo 'Successfully!'
//         }
//         failure {
//             echo 'Failed!'
//         }
//         unstable {
//             echo 'This will run only if the run was marked as unstable'
//         }
//         changed {
//             echo 'This will run only if the state of the Pipeline has changed'
//             echo 'For example, if the Pipeline was previously failing but is now successful'
//         }
//     }
//     options {
//         timeout(time: 60, unit: 'MINUTES')
//     }
//}
def environment = ""
def branch = "${scm.branches[0].name}".replaceAll(/^\*\//, '').replace("/", "-").toLowerCase()
def k8slabel = "jenkins-pipeline-${UUID.randomUUID().toString()}"
def repositoryName = "${JOB_NAME}"
    .split('/')[0]
    .replace('-fuchicorp', '')
    .replace('-build', '')
    .replace('-deploy', '')


try {
      def slavePodTemplate = """
      metadata:
        labels:
          k8s-label: ${k8slabel}
        annotations:
          jenkinsjoblabel: ${env.JOB_NAME}-${env.BUILD_NUMBER}
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - jenkins-jenkins-master
              topologyKey: "kubernetes.io/hostname"
        containers:
        - name: docker
          image: docker:latest
          imagePullPolicy: Always
          command:
          - cat
          tty: true
          volumeMounts:
            - mountPath: /var/run/docker.sock
              name: docker-sock
            - mountPath: /etc/secrets/service-account/
              name: google-service-account
        - name: fuchicorptools
          image: fuchicorp/buildtools:maven
          imagePullPolicy: Always
          command:
          - cat
          tty: true
          volumeMounts:
            - mountPath: /var/run/docker.sock
              name: docker-sock
            - mountPath: /etc/secrets/service-account/
              name: google-service-account
        serviceAccountName: common-service-account
        securityContext:
          runAsUser: 0
          fsGroup: 0
        volumes:
          - name: google-service-account
            secret:
              secretName: google-service-account
          - name: docker-sock
            hostPath:
              path: /var/run/docker.sock
    """

  podTemplate(name: k8slabel, label: k8slabel, yaml: slavePodTemplate) {
      node(k8slabel) {
        container('fuchicorptools') {
          stage("Pulling the code") {
            checkout scm
          }
          stage('Build and test') {
              sh 'mvn test'
          }


      }
    }
  }
} catch (e) {
    currentBuild.result = 'FAILURE'
    println("ERROR Detected:")
    println(e.getMessage())
}

